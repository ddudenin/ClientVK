Revision history

CREATE UI

Part 1

1. Создано приложение.
2. Добавлена форма для входа.
3. Форма адаптирована для телефонов в альбомной ориентации, планшетов.

Part 2

1. После того, как пользователь ввел верные логин и пароль, происходит переход на UITabbarViewController.
2. Добавлены две вкладки в UITabbarViewController. Первая вкладка для отображения друзей пользователя и его фотографий (переход с таблицы на коллекцию происходит по нажатию на ячейку). На второй вкладке первый контроллер используется для отображения групп пользователя, второй — глобального поиска групп, которые могут быть интересны пользователю. Для перехода с первой таблицы на вторую происходи по нажатию Bar Button Item.

Part 3

1. На первой вкладке отображается список друзей пользователя. В прототипе ячеек должна быть текстовая надпись с именем друга и изображением с его аватаркой.
2. При нажатии на ячейку из п. 1 переходим на его страницу. На этой странице отображается имя и фото выбранного друга.
3. На второй вкладке отображаются группы пользователя. Прототип ячейки содержит текстовую надпись для имени группы и изображение для её аватарки.
4. Вторая таблица на 2 вкладке отображает группы, в которых пользователь не состоит. Прототип ячейки аналогичен прототипу из первой таблицы.
5. На базе классов пользователя и группы созданы массивы демонстрационных данных, отображенные на соответствующих им экранах.
5. Реализовано добавление и удаление групп пользователя.

Part 4

1. Реализован кастомный UIView для аватарки c отрисовкой тени. Функционал предусматривает возможность изменения радиуса, цвета, прозрачности тени в interface builder.
2. Реализован контрол «Мне нравится», с помощью которого можно поставить лайк под постом в ленте. Данный контрол объединяет кнопку с иконкой сердца и количеством отметок рядом с ней.
3. Реализован контрол, позволяющий выбрать букву алфавита на экране списка друзей.
4. Проведен небольшой review code (доработаны constraints, исправлены ошибки code style, удалены лишние файлы и др.)

Part 5

Code review

Part 6

1. Добавлен header секции для таблицы со списком друзей, который содержит первую букву фамилии и имеет полупрозрачный цвет фона, совпадающий с цветом таблицы.
2. Добавлен UISearchBar в header таблицы со списком друзей и групп. Реализован поиск с выводом результатов в ту же таблицу.
3. Создан экран новостей (таблица + ячейка). Ячейка содержит то же самое, что и в оригинальном приложении ВКонтакте: надпись, фотографии, кнопки «Мне нравится», «Комментировать», «Поделиться» и индикатор количества просмотров, а также аватар автора поста и дата публикации.
4. В ячейку новости добавлено отображение нескольких фотографий. Они располагаются в зоне, ширина которой равна ширине ячейки, а высота вычисляется автоматически.

Part 7

1. При открытии экрана авторизации запускается анимация индикатора загрузки, который состоит из трех точек, меняющих прозрачность по очереди.
2. Добавлена анимация нажатия на аватарку группы в таблице групп пользователя. По нажатию фотография немного сжимается, а после — возвращается в исходное положение с эффектом пружины.
3. Сделана анимация изменения количества отметок «Мне нравится».
4. Сделана анимация появления ячеек друзей пользователя. Перед показом ячейка увеличивается и становиться непрозрачной.

Part 8

1. Добавлена интерактивная анимация перелистывания фотографий с возможностью начать перелистывать и отменить это действие. Она состоит из двух частей: сначала фотография немного отдаляется, а затем новый снимок выдвигается справа. При пролистывании назад анимация показывается в обратном направлении.
2. Модифицирован индикатор загрузки: по контуру фигуры облака передвигается линия.

Part 9

1. Сделана анимация переходов между экранами в UINavigationController.
2. Сделана интерактивная анимация закрытия экрана в UINavigationController. В качестве распознавателя жестов используется UIScreenEdgePanGestureRecognizer.

CLIENT-SERVER

Part 1

В проект добавлен синглтон для хранения данных о текущей сессии.

Part 2

1. Зарегистрировано приложение в ВК.
2. Добавлена форма входа на WKWebView для авторизации в ВК (переход на страницу осуществляется через нажатие на кнопку на главном экране атворизации). Полученный токен сохраняется в синглтоне сессии;
3. Реализованы запросы к VK API: получение списка друзей, фотографий человека, групп текущего пользователя и групп по поисковому запросу;
4. Полученные данные пока выводятся в консоль.

Part 3

1. Реализованы классы User, Photo, Group для представления соответствующих данных приложения;
1. Изменены методы получения данных от VK API: JSON-ответ сервера инициализирует соответствующие классы;
3. Полученные из запросов данные отображены на ранее созданных экранах;

Part 4

Ранее созданные объекты (User, Photo, Group) преобразованы в объекты Realm.

Part 5

1. Реализовано сохранение данных, полученных от VK API в Realm;
2. На всех экранах данные получаются не от запросов к серверу, а из Realm.

Part 6

1. На экраны групп пользователя и фотографий друзей добавлены Realm Notifications;
2. Для работы с изображениями добавлена библиотека SDWebImage;
3. Рефакторинг кода и исправления предупреждений компилятора.

Part 7

1. Интегрирование Firebase в приложение;
2. Добавлен вход через Firebase Auth (анонимная авторизация);
3. Сохранение данных пользователей (в коде можно выбрать тип базы данных: realtime, firestore).
